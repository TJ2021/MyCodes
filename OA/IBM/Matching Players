Question
Given the initial setup of a match between two player, evaluate the match's outcome.

There are two players, and there is a number sequence of size n. Players alternate turns for 
 rounds. Each round, a player removes the first number from the sequence and adds its value to their score, After that, if the “removed” number is even, the remaining sequence is reversed.

Determine the difference in scores between the two players after the game.

More precisely, suppose first_score and second_score are the final scores of the first and second player, respectively. The goal is to calculate the value of first_score - second_score.

Example
The number of elements is 
 and 
.

 round: The first player picks 3, first_score = 3. The remaing sequence: [6, 2, 3, 5].
 round: The second player picks 6, second_score = 6. Since 6 is even, the remaining sequence is reversed: [5, 3, 2].
 round: The first player picks 5, first_score = 3 + 5 = 8. The remaining sequence: [3, 2].
 round: Second player picks 3, second_score = 6 + 3 = 9. The remaining sequence: [2].
 round (final): First player picks 2, second_score = 8 + 2 = 10. The remaining sequence: []
The total difference between players' scores is first_score - second_score = 10 - 9 = 1

Function Description
Complete the function getScoreDifference in the editor.

getScoreDifference has the following parameter:

numSeq: the given array of intergers
Returns
int: first_score - second_score
Constraints:
 for each 
Sample Case 0:
numSeq[] size n = 4
numSeq = [2, 1, 4, 3]

Sample Output: 2

Explanation

The game proceeds as follows:

 round: First player picks 2, first_score = 2. The remaining sequence is reversed (since 2 is even): [3, 4, 1].
 round: The second player picks 3, second_score = 3. The remaining sequence: [4, 1].
 round: The first player picks 4, first_score = 2 + 4 = 6. The remaining sequence: [1].
 round(final): Second player picks 1, second_score = 3 + 1 = 4. The remaining sequence: [].
The difference between players' score is 6 - 4 = 2.

Sample Case 1:
numSeq[] size n = 2
numSeq = [2, 2]

Sample Output: 0


Solution 1:

for i in range(n):
   if forward_dir == True:
      if i % 2 == 0:
         first_score += numSeq[l]
      else:
          second_score += numSeq[l]
      if numSeq[l] % 2 == 0:
        forward_dir = False
      l += 1
        
    else:
       if i % 2 == 0:
          first_score += numSeq[r]
        else:
           second_score += numSeq[r]            
        if numSeq[r] % 2 == 0:
           forward_dir = True
         r -= 1
 return first_score - second_score


Solution 2:

def solve(num):
    first_score = 0
    second_score = 0
    i = 0 # pointer in start
    j = len(num) - 1 # pointer in the end
    is_reverse = False # to check which pointer will move
    turn = 0 # who will pick next
    while i <= j:
        if is_reverse:
            if turn % 2 == 0:
                first_score += num[j]
            else:
                second_score += num[j]
            if num[j]%2 == 0:
                is_reverse = not is_reverse
            j -= 1

                
        else:
            if turn % 2 == 0:
                first_score += num[i]
            else:
                second_score += num[i]
            if num[i]%2 == 0:
                is_reverse = not is_reverse
            i += 1

        turn += 1
            
    return first_score - second_score

print(solve([3,6,2,3,5])) # Expected: 1, Output: 1
print(solve([2,1,4,3])) # Expected: 2, Output: 2
print(solve([2,2])) # Expected: 0, Output: 0
Complexity:
Time: 
Space: 
