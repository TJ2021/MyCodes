 A password, pwd, consists of binary characters (0s and 1s). A cybersecurity expert is trying to determine the minimum number of changes required to make the password secure. 
To do so, it must be divided into substrings of non-overlapping, even-length substrings. Each substring can only contain 1s or 0s, not a mix. This helps ensure that the password is 
strong and less vulnerable to hacking attacks. Find the minimum number of characters that must be flipped in the password string, i.e., changed from 0 to 1 or 1 to 0, to allow the 
string to be divided as described.
input:pwd -> a binary string
      length of pwd is even

Hint: Number of substrings is not mentioned, says only even length
      So group every pairs and see if a swap is needed. If needed , increment the count by one.

def minFlips(pwd):
  result = 0
  for i in range(0,len(pwd)-1,2):
    if pwd[i] != pwd[i+1]:
      result += 1
return result
      
